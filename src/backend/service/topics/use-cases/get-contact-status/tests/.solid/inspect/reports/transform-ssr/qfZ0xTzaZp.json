{"resolvedId":"/Users/joohom/Documents/Projects/SideProjects/tinode/tinode-clone/tinode-clone-2/src/backend/service2/topics/use-cases/get-contact-status/get-contact-status.spec.ts","transforms":[{"name":"__load__","result":"import { drizzle } from \"drizzle-orm/node-postgres\";\nimport { expect, describe, test } from \"vitest\";\nimport { Pool } from \"pg\";\nimport { InferModel, sql } from \"drizzle-orm\";\nimport { registerUser } from \"../../../users/use-cases/create-user/create-user\";\nimport { err, ok } from \"neverthrow\";\nimport { seed } from \"../../../../service2/test-utils/seed\";\nimport { getContactStatus } from \"./get-contact-status\";\nimport OnlineUsers from \"../../../../service/utils/online-registry\";\n\nconst config = {\n  DB_URL: \"postgres://dbuser:dbuser@localhost/tinode_clone_test\",\n  JWT_KEY: \"xxx-xxx\",\n};\n\nconst db = drizzle(new Pool({ connectionString: config.DB_URL }), {\n  logger: true,\n});\n\ndescribe(\"Topic\", () => {\n  test(\"get contact status\", async () => {\n    await db.execute(sql`TRUNCATE TABLE users RESTART IDENTITY CASCADE;`);\n\n    await seed(db);\n    const onlineUsers = new OnlineUsers();\n\n    {\n      const result = await getContactStatus(\n        { db, onlineUsers },\n        { username: \"alice\" }\n      );\n      if (result.isErr()) {\n        throw result.error;\n      }\n      expect(result.value.length).toBe(1);\n      expect(result.value[0].username).toBe(\"carol\");\n      expect(result.value[0].online).toBe(false);\n    }\n\n    onlineUsers.add(\"carol\", {\n      next(value) {},\n      error(err) {},\n      complete() {},\n    });\n    {\n      const result = await getContactStatus(\n        { db, onlineUsers },\n        { username: \"alice\" }\n      );\n      if (result.isErr()) {\n        throw result.error;\n      }\n      expect(result.value.length).toBe(1);\n      expect(result.value[0].username).toBe(\"carol\");\n      expect(result.value[0].online).toBe(true);\n    }\n\n    {\n      const result = await getContactStatus(\n        { db, onlineUsers },\n        { username: \"carol\" }\n      );\n      if (result.isErr()) {\n        throw result.error;\n      }\n      expect(result.value.length).toBe(3);\n    }\n  });\n});\n","start":1682217044536,"end":1682217044536},{"name":"vite:esbuild","result":"import { drizzle } from \"drizzle-orm/node-postgres\";\nimport { expect, describe, test } from \"vitest\";\nimport { Pool } from \"pg\";\nimport { sql } from \"drizzle-orm\";\nimport { seed } from \"../../../../service2/test-utils/seed\";\nimport { getContactStatus } from \"./get-contact-status\";\nimport OnlineUsers from \"../../../../service/utils/online-registry\";\nconst config = {\n  DB_URL: \"postgres://dbuser:dbuser@localhost/tinode_clone_test\",\n  JWT_KEY: \"xxx-xxx\"\n};\nconst db = drizzle(new Pool({ connectionString: config.DB_URL }), {\n  logger: true\n});\ndescribe(\"Topic\", () => {\n  test(\"get contact status\", async () => {\n    await db.execute(sql`TRUNCATE TABLE users RESTART IDENTITY CASCADE;`);\n    await seed(db);\n    const onlineUsers = new OnlineUsers();\n    {\n      const result = await getContactStatus(\n        { db, onlineUsers },\n        { username: \"alice\" }\n      );\n      if (result.isErr()) {\n        throw result.error;\n      }\n      expect(result.value.length).toBe(1);\n      expect(result.value[0].username).toBe(\"carol\");\n      expect(result.value[0].online).toBe(false);\n    }\n    onlineUsers.add(\"carol\", {\n      next(value) {\n      },\n      error(err2) {\n      },\n      complete() {\n      }\n    });\n    {\n      const result = await getContactStatus(\n        { db, onlineUsers },\n        { username: \"alice\" }\n      );\n      if (result.isErr()) {\n        throw result.error;\n      }\n      expect(result.value.length).toBe(1);\n      expect(result.value[0].username).toBe(\"carol\");\n      expect(result.value[0].online).toBe(true);\n    }\n    {\n      const result = await getContactStatus(\n        { db, onlineUsers },\n        { username: \"carol\" }\n      );\n      if (result.isErr()) {\n        throw result.error;\n      }\n      expect(result.value.length).toBe(3);\n    }\n  });\n});\n","start":1682217044536,"end":1682217044539,"order":"normal"},{"name":"vite:define","result":"import { drizzle } from \"drizzle-orm/node-postgres\";\nimport { expect, describe, test } from \"vitest\";\nimport { Pool } from \"pg\";\nimport { sql } from \"drizzle-orm\";\nimport { seed } from \"../../../../service2/test-utils/seed\";\nimport { getContactStatus } from \"./get-contact-status\";\nimport OnlineUsers from \"../../../../service/utils/online-registry\";\nconst config = {\n  DB_URL: \"postgres://dbuser:dbuser@localhost/tinode_clone_test\",\n  JWT_KEY: \"xxx-xxx\"\n};\nconst db = drizzle(new Pool({ connectionString: config.DB_URL }), {\n  logger: true\n});\ndescribe(\"Topic\", () => {\n  test(\"get contact status\", async () => {\n    await db.execute(sql`TRUNCATE TABLE users RESTART IDENTITY CASCADE;`);\n    await seed(db);\n    const onlineUsers = new OnlineUsers();\n    {\n      const result = await getContactStatus(\n        { db, onlineUsers },\n        { username: \"alice\" }\n      );\n      if (result.isErr()) {\n        throw result.error;\n      }\n      expect(result.value.length).toBe(1);\n      expect(result.value[0].username).toBe(\"carol\");\n      expect(result.value[0].online).toBe(false);\n    }\n    onlineUsers.add(\"carol\", {\n      next(value) {\n      },\n      error(err2) {\n      },\n      complete() {\n      }\n    });\n    {\n      const result = await getContactStatus(\n        { db, onlineUsers },\n        { username: \"alice\" }\n      );\n      if (result.isErr()) {\n        throw result.error;\n      }\n      expect(result.value.length).toBe(1);\n      expect(result.value[0].username).toBe(\"carol\");\n      expect(result.value[0].online).toBe(true);\n    }\n    {\n      const result = await getContactStatus(\n        { db, onlineUsers },\n        { username: \"carol\" }\n      );\n      if (result.isErr()) {\n        throw result.error;\n      }\n      expect(result.value.length).toBe(3);\n    }\n  });\n});\n","start":1682217044540,"end":1682217044540,"order":"normal"},{"name":"vite:import-analysis","result":"import { drizzle } from \"drizzle-orm/node-postgres\";\nimport { expect, describe, test } from \"vitest\";\nimport { Pool } from \"pg\";\nimport { sql } from \"drizzle-orm\";\nimport { seed } from \"/@fs/Users/joohom/Documents/Projects/SideProjects/tinode/tinode-clone/tinode-clone-2/src/backend/service2/test-utils/seed.ts\";\nimport { getContactStatus } from \"/get-contact-status.ts\";\nimport OnlineUsers from \"/@fs/Users/joohom/Documents/Projects/SideProjects/tinode/tinode-clone/tinode-clone-2/src/backend/service/utils/online-registry.ts\";\nconst config = {\n  DB_URL: \"postgres://dbuser:dbuser@localhost/tinode_clone_test\",\n  JWT_KEY: \"xxx-xxx\"\n};\nconst db = drizzle(new Pool({ connectionString: config.DB_URL }), {\n  logger: true\n});\ndescribe(\"Topic\", () => {\n  test(\"get contact status\", async () => {\n    await db.execute(sql`TRUNCATE TABLE users RESTART IDENTITY CASCADE;`);\n    await seed(db);\n    const onlineUsers = new OnlineUsers();\n    {\n      const result = await getContactStatus(\n        { db, onlineUsers },\n        { username: \"alice\" }\n      );\n      if (result.isErr()) {\n        throw result.error;\n      }\n      expect(result.value.length).toBe(1);\n      expect(result.value[0].username).toBe(\"carol\");\n      expect(result.value[0].online).toBe(false);\n    }\n    onlineUsers.add(\"carol\", {\n      next(value) {\n      },\n      error(err2) {\n      },\n      complete() {\n      }\n    });\n    {\n      const result = await getContactStatus(\n        { db, onlineUsers },\n        { username: \"alice\" }\n      );\n      if (result.isErr()) {\n        throw result.error;\n      }\n      expect(result.value.length).toBe(1);\n      expect(result.value[0].username).toBe(\"carol\");\n      expect(result.value[0].online).toBe(true);\n    }\n    {\n      const result = await getContactStatus(\n        { db, onlineUsers },\n        { username: \"carol\" }\n      );\n      if (result.isErr()) {\n        throw result.error;\n      }\n      expect(result.value.length).toBe(3);\n    }\n  });\n});\n","start":1682217044540,"end":1682217044545,"order":"normal"}]}
