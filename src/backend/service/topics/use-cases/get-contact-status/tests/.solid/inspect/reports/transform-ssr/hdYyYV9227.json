{"resolvedId":"/Users/joohom/Documents/Projects/SideProjects/tinode/tinode-clone/tinode-clone-2/src/backend/service2/topics/use-cases/get-contact-status/get-contact-status.repo.ts","transforms":[{"name":"__load__","result":"import { NodePgDatabase } from \"drizzle-orm/node-postgres\";\nimport { fromPromise } from \"neverthrow\";\nimport { eq } from \"drizzle-orm\";\nimport { and, inArray, not } from \"drizzle-orm/expressions\";\nimport { topics, users, subscriptions } from \"../../../../../drizzle/schema\";\nimport { okAsync } from \"neverthrow\";\n\nexport function getUserContact(\n  ctx: { db: NodePgDatabase },\n  input: {\n    username: string;\n  }\n) {\n  const { db } = ctx;\n  return fromPromise(\n    db\n      .select({ topicId: subscriptions.topicId })\n      .from(subscriptions)\n      .where(eq(subscriptions.username, input.username)),\n    (e) => e\n  )\n    .andThen((r) => {\n      if (r.length == 0) {\n        return okAsync([]);\n      }\n      return fromPromise(\n        db\n          .select({\n            topicId: topics.id,\n            username: users.username,\n            fullname: users.fullname,\n            touchedAt: topics.touchedAt,\n          })\n          .from(topics)\n          .innerJoin(subscriptions, eq(subscriptions.topicId, topics.id))\n          .innerJoin(users, eq(subscriptions.username, users.username))\n          .where(\n            and(\n              inArray(\n                topics.id,\n                r.map((t) => t.topicId)\n              ),\n              not(eq(subscriptions.username, input.username))\n            )\n          ),\n        (e) => e\n      );\n    })\n    .map((r) =>\n      r.map((t) => {\n        return {\n          topicId: t.topicId,\n          username: t.username,\n          fullname: t.fullname,\n          touchedAt: t.touchedAt ? new Date(t.touchedAt) : null,\n        };\n      })\n    );\n}\n","start":1682217044662,"end":1682217044662},{"name":"vite:esbuild","result":"import { fromPromise } from \"neverthrow\";\nimport { eq } from \"drizzle-orm\";\nimport { and, inArray, not } from \"drizzle-orm/expressions\";\nimport { topics, users, subscriptions } from \"../../../../../drizzle/schema\";\nimport { okAsync } from \"neverthrow\";\nexport function getUserContact(ctx, input) {\n  const { db } = ctx;\n  return fromPromise(\n    db.select({ topicId: subscriptions.topicId }).from(subscriptions).where(eq(subscriptions.username, input.username)),\n    (e) => e\n  ).andThen((r) => {\n    if (r.length == 0) {\n      return okAsync([]);\n    }\n    return fromPromise(\n      db.select({\n        topicId: topics.id,\n        username: users.username,\n        fullname: users.fullname,\n        touchedAt: topics.touchedAt\n      }).from(topics).innerJoin(subscriptions, eq(subscriptions.topicId, topics.id)).innerJoin(users, eq(subscriptions.username, users.username)).where(\n        and(\n          inArray(\n            topics.id,\n            r.map((t) => t.topicId)\n          ),\n          not(eq(subscriptions.username, input.username))\n        )\n      ),\n      (e) => e\n    );\n  }).map(\n    (r) => r.map((t) => {\n      return {\n        topicId: t.topicId,\n        username: t.username,\n        fullname: t.fullname,\n        touchedAt: t.touchedAt ? new Date(t.touchedAt) : null\n      };\n    })\n  );\n}\n","start":1682217044662,"end":1682217044663,"order":"normal"},{"name":"vite:define","result":"import { fromPromise } from \"neverthrow\";\nimport { eq } from \"drizzle-orm\";\nimport { and, inArray, not } from \"drizzle-orm/expressions\";\nimport { topics, users, subscriptions } from \"../../../../../drizzle/schema\";\nimport { okAsync } from \"neverthrow\";\nexport function getUserContact(ctx, input) {\n  const { db } = ctx;\n  return fromPromise(\n    db.select({ topicId: subscriptions.topicId }).from(subscriptions).where(eq(subscriptions.username, input.username)),\n    (e) => e\n  ).andThen((r) => {\n    if (r.length == 0) {\n      return okAsync([]);\n    }\n    return fromPromise(\n      db.select({\n        topicId: topics.id,\n        username: users.username,\n        fullname: users.fullname,\n        touchedAt: topics.touchedAt\n      }).from(topics).innerJoin(subscriptions, eq(subscriptions.topicId, topics.id)).innerJoin(users, eq(subscriptions.username, users.username)).where(\n        and(\n          inArray(\n            topics.id,\n            r.map((t) => t.topicId)\n          ),\n          not(eq(subscriptions.username, input.username))\n        )\n      ),\n      (e) => e\n    );\n  }).map(\n    (r) => r.map((t) => {\n      return {\n        topicId: t.topicId,\n        username: t.username,\n        fullname: t.fullname,\n        touchedAt: t.touchedAt ? new Date(t.touchedAt) : null\n      };\n    })\n  );\n}\n","start":1682217044663,"end":1682217044663,"order":"normal"},{"name":"vite:import-analysis","result":"import { fromPromise } from \"neverthrow\";\nimport { eq } from \"drizzle-orm\";\nimport { and, inArray, not } from \"drizzle-orm/expressions\";\nimport { topics, users, subscriptions } from \"/@fs/Users/joohom/Documents/Projects/SideProjects/tinode/tinode-clone/tinode-clone-2/src/drizzle/schema.ts\";\nimport { okAsync } from \"neverthrow\";\nexport function getUserContact(ctx, input) {\n  const { db } = ctx;\n  return fromPromise(\n    db.select({ topicId: subscriptions.topicId }).from(subscriptions).where(eq(subscriptions.username, input.username)),\n    (e) => e\n  ).andThen((r) => {\n    if (r.length == 0) {\n      return okAsync([]);\n    }\n    return fromPromise(\n      db.select({\n        topicId: topics.id,\n        username: users.username,\n        fullname: users.fullname,\n        touchedAt: topics.touchedAt\n      }).from(topics).innerJoin(subscriptions, eq(subscriptions.topicId, topics.id)).innerJoin(users, eq(subscriptions.username, users.username)).where(\n        and(\n          inArray(\n            topics.id,\n            r.map((t) => t.topicId)\n          ),\n          not(eq(subscriptions.username, input.username))\n        )\n      ),\n      (e) => e\n    );\n  }).map(\n    (r) => r.map((t) => {\n      return {\n        topicId: t.topicId,\n        username: t.username,\n        fullname: t.fullname,\n        touchedAt: t.touchedAt ? new Date(t.touchedAt) : null\n      };\n    })\n  );\n}\n","start":1682217044663,"end":1682217044664,"order":"normal"}]}
